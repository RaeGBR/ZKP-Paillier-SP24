/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hk.edu.polyu.comp;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.File;

import org.junit.Test;

import polyu.cryptoplus.EC;
import polyu.cryptoplus.KeyPair;
import polyu.cryptoplus.Utils;

public class LibraryTest {
	static {
		// Load library with relative path
		File lib = new File("../../build/jni/cryptoplus/libcryptoplus.so");
		System.load(lib.getAbsolutePath());

		// Or you can configure the Java Library Path, and load the library by name
		// System.loadLibrary("cryptoplus");
	}

	@Test
	public void testOtherCryptoFunctions() {
		// AES Encryption
		int AES_KEY_LEN = 16;
		byte[] aesKey = Utils.random(AES_KEY_LEN);
		byte[] iv = Utils.random(AES_KEY_LEN);
		byte[] data = Utils.stringToBinary("testing");
		byte[] encrypted = Utils.aesEncrypt(aesKey, iv, data);
		byte[] decrypted = Utils.aesDecrypt(aesKey, iv, encrypted);

		assertEquals(Utils.binaryToString(decrypted), "testing");

		// EC Encryption
		EC curve = EC.SECP256K1();

		KeyPair keypair = KeyPair.createRandomKey(curve);
		encrypted = Utils.ecEncrypt(curve, keypair.getPublicKey(), data);
		decrypted = Utils.ecDecrypt(curve, keypair.getPrivateKey(), encrypted);

		assertEquals(Utils.binaryToString(decrypted), "testing");

		// EC Signature
		byte[] signature = Utils.calcSignature(curve, keypair.getPrivateKey(), data);
		boolean isValid = Utils.verifySignature(curve, keypair.getPublicKey(), data, signature);

		assertTrue(isValid);
	}

}
