@import "./math.djinni"
@import "./ec.djinni"

HashUtils = interface +c {
  static sha256(message: binary): binary;
}

RandomUtils = interface +c {
  static random(byteLength: i32): binary;
  static randomWithSeed(byteLength: i32, seed: binary): binary;
  static randomHex(byteLength: i32): string;
  static randomHexWithSeed(byteLength: i32, seed: binary): string;
  static randomInt(byteLength: i32): Integer;
  static randomIntWithSeed(byteLength: i32, seed: binary): Integer;
}

CryptoUtils = interface +c {
  static ecGenerateSignature(curve: ECCurve, privateKey: binary, message: binary): binary;
  static ecVerifySignature(curve: ECCurve, publicKey: binary, message: binary, signature: binary): bool;
  static ecEncrypt(curve: ECCurve, publicKey: binary, plaintext: binary): binary;
  static ecDecrypt(curve: ECCurve, privateKey: binary, cyphertext: binary): binary;
  static aesEncrypt(key: binary, iv: binary, plainText: binary): binary;
  static aesDecrypt(key: binary, iv: binary, encryptedText: binary): binary;
}

Utils = interface +c {
  static binaryToString(bytes: binary): string;
  static binaryToHex(bytes: binary): string;
  static binaryConcat(a: binary, b: binary): binary;
  static binaryPadZero(bytes: binary, length: i32): binary;
  static stringToBinary(plainText: string): binary;
  static stringToHex(plainText: string): string;
  static hexToBinary(hexString: string): binary;
  static hexToString(plainText: string): string;
}
