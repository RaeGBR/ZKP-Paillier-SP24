#include "gtest/gtest.h"

#include "lib/namespace.hpp"

#include "Utils.hpp"
#include "lib/paillier/PaillierEncryption.hpp"
#include "lib/math/IntegerImpl.hpp"

using namespace std;
using namespace cryptoplus;

namespace
{
TEST(Paillier, KeyGeneration)
{
  int byteLength = 32;
  for (int i = 0; i < 10; i++)
  {
    auto crypto = PaillierEncryption::generate(byteLength);
    EXPECT_EQ(crypto->getPublicKey()->toBinary().size(), byteLength);
    EXPECT_TRUE(crypto->getPublicKey()->gcd(crypto->getPrivateKey())->eq(Integer::ONE()));
  }

  vector<uint8_t> seed{0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x34};
  auto c1 = PaillierEncryption::generate(byteLength, seed);
  auto c2 = PaillierEncryption::generate(byteLength, seed);
  EXPECT_TRUE(c2->getPrivateKey()->eq(c1->getPrivateKey()));
  EXPECT_TRUE(c2->getPublicKey()->eq(c1->getPublicKey()));
  EXPECT_TRUE(c1->getPublicKey()->gcd(c1->getPrivateKey())->eq(Integer::ONE()));
}

TEST(Paillier, CyclicGroupGeneration)
{
  auto crypto = make_shared<PaillierEncryption>(
      make_shared<IntegerImpl>(15),
      make_shared<IntegerImpl>(3),
      make_shared<IntegerImpl>(5));

  auto Q = crypto->getGroupQ();
  auto p = crypto->getGroupP();
  auto g = crypto->getGroupG();

  EXPECT_EQ(p->toString(), "225");
  EXPECT_EQ(Q->toString(), "1801");

  EXPECT_FALSE(p->isPrime());
  EXPECT_TRUE(Q->isPrime());

  EXPECT_EQ(g->modPow(p, Q)->toString(), "1");
  EXPECT_EQ(g->modPow(Integer::ZERO(), Q)->toString(), "1");

  auto _p = p->toNumber();
  for (int i = 1; i < _p; i++)
  {
    auto x = make_shared<IntegerImpl>(i);
    EXPECT_NE(g->modPow(x, Q)->toString(), "1")
        << "generator: " << g->toString() << "^" << i << " mod " << Q->toString()
        << " should not equal to 1";
  }
}

TEST(Paillier, EncryptionDecryption)
{
  int byteLength = 32;
  auto m = Integer::createWithString("30.");

  auto crypto = PaillierEncryption::generate(byteLength);

  for (int i = 0; i < 50; i++)
  {
    auto c = crypto->encrypt(m);
    EXPECT_EQ(crypto->decrypt(c)->toString(), m->toString());
  }
}

TEST(Paillier, EncryptionDecryption2)
{
  int byteLength = 32;
  auto m = Integer::createWithString("30.");

  auto crypto = PaillierEncryption::generate(byteLength);
  auto pk = crypto->getPublicKey();
  auto sk = crypto->getPrivateKey();

  auto encryptor = make_shared<PaillierEncryption>(pk);
  auto decryptor = make_shared<PaillierEncryption>(pk, sk);

  auto c = encryptor->encrypt(m);
  auto r = decryptor->decrypt(c);

  EXPECT_TRUE(m->eq(r));
}

TEST(Paillier, HomomorphicAddition)
{
  int byteLength = 32;
  auto m1 = make_shared<IntegerImpl>("30", 10);
  auto m2 = make_shared<IntegerImpl>("32", 10);

  auto crypto = PaillierEncryption::generate(byteLength);

  EXPECT_EQ(crypto->decrypt(crypto->add(crypto->encrypt(m1), m2, false))->toString(), "62");
  EXPECT_EQ(crypto->decrypt(crypto->add(crypto->encrypt(m1), crypto->encrypt(m2), true))->toString(), "62");

  for (int i = 0; i < 50; i++)
  {
    auto ma = Random::genInteger(32);
    auto mb = Random::genInteger(32);
    auto sum = ma->add(mb)->mod(crypto->getPublicKey());
    EXPECT_EQ(crypto->decrypt(crypto->add(crypto->encrypt(ma), mb, false))->toString(), sum->toString());
    EXPECT_EQ(crypto->decrypt(crypto->add(crypto->encrypt(ma), crypto->encrypt(mb), true))->toString(), sum->toString());
  }
}

TEST(Paillier, HomomorphicMultiplication)
{
  int byteLength = 32;
  auto m1 = make_shared<IntegerImpl>("30", 10);
  auto m2 = make_shared<IntegerImpl>("32", 10);

  auto crypto = PaillierEncryption::generate(byteLength);

  EXPECT_EQ(crypto->decrypt(crypto->mul(crypto->encrypt(m1), m2))->toString(), "960");

  for (int i = 0; i < 50; i++)
  {
    auto ma = Random::genInteger(32);
    auto mb = Random::genInteger(32);
    auto prod = ma->mul(mb)->mod(crypto->getPublicKey());

    EXPECT_EQ(crypto->decrypt(crypto->mul(crypto->encrypt(ma), mb))->toString(), prod->toString());
  }
}

TEST(Paillier, Generate_group_element)
{
/*
===== Key 1 =====
byteLength: 256

p=N^2 (4088-bit):
0E05F7EE6E2AA7F0AFA21F0BE4BD3D300884F10EC7CFD449BCD404BFC3C268D105F62767D3AE8588569A202E1C3C6CDA5BC165252224843137AD24FD7A3297580837A8154426DA9B3CC232040C3A53724C5655CC280D16F459B42F8B09A2754D45BC3ABAB2348F57FC41932B51CB779DAC0CB44CA2D3A26ACCA6785995C4B3EA0732EF03EA123DA11BC81276C82F75461C4264F3154246DF6895AB56DA87523E54F02C21D080EE4684EE998D48F08D9FB93DCCE2E7F8564A6697C00691B1C308C2CCEE134756DBD0F7DAAC9234D379C96700AE733C55766E857CA0E696F5D9C6F3BCAA33AE97913D43FE1C450490BE7CC0CB63FAF5F9EB7D3E3D71E11DF96B6211D16B94946CD35970266350BC618B760369681443B948CE599F88B252C914E81DBCA2E29D26420374964D434E824EAFCCB0DA24B5F121159A79D8839B121E1D2669CBBAACECA80F97431A23EC2D2696FC6E13E1070F67BE4001663676576B117F3252E3E453A79CA2696C7E99E4E1B2504DDA1E374BE4AFDD6E4E94DBE687B94998C3CEA8ACF9DB922C2EE98E0990ADDB4D721F5B2F773E26AB753B95CC380C867A6E76D2628FC21E8F65FC413FA629E96E67CBB501AEAE94948D9B7F93BADE483E47D5CFF72BE6C832FAD0F4CA369B6238D4BAF2DF61FD0A4263528EDF05F9474EA63ED4BED4F41B1D5791CB1473D53214182F011169B8BA2EA03918EAA1

Q (4096-bit):
163D773422B7A657B68B1D3CDCC41F0A2D82D64D70E39AACF1783F882076523B7F74627EA9B6C7C639586F0920C7D4A24D84B668E425E9A60E4C98A9FFCC3C059D084491BA159EB2325BFB526B6480574510EC11C784C2678643C3668147A6088C988524169F5B558A0FFF66B3B8AFB40EDC25F18A3BA395609002DE1385F555276AC7103538EDBD820F4D48617B43FD30D14C1983B71C664FDD5DBBBE929C6EDAB4E5FDA0AC79E3D6D2678611AD809B4FC802EFDBE3D8D9FEB4AA8A6B0FEB4FE4F101929323C09D6914CDAFDFC76325695B14AAC1AF89D347B3A72DB369E761868D35EDF6E4605729D500D5753D8E19D9C29090021A5B78A0B5729B0589904D8842209DA364972FD7DCE1820AC2B32D29692B102367D977422302CACF4AE7281F292A53653AACB17AE65E88BE82A8CACEA079F6388C6A7842FD3D60B7EEBBC23AEBC91A0E3F5288B9E46B74F88F9B3374569386E1326E87B982381A5FAEA3CDBFB9CF756C1CABD269933210C810FDF0CB5B77EBEBB25CAEE92CF0A014BF9B3FDAB84689BF82544239D2126667432B73B9CCD2FDBA9D471C9153EBEC7F91E0E3DD462B3071A84FFDDC776BBE0F7AF1867835189D1110AB08DFA398949C544A5C8692C5ED17D1FFA00180D9C76438B29A6DC621607D2E45674E454984EE95B3795716BBA7A566A5BB230088E138126FB41D6BDE5A8BB19DAAF745F21A8D841B57

G:
109BCA88C471F06B21AF86071D58D625FEA2CEAF80C8A1132D1888067154716DA03967E375E00ADADDA9763196DB65A91ADCD3ADB1583CD4B450B3503FF528737139A9FE570C22F09348C040514C7FA61C1C3595357A4208B2495F993FEA4D826A6D673E004A91379EBE727DB415C09E334BED068EB4080B8BE18B262140D7EE0DB12706E04E2E00DCC925C9D695F78805B50CD823C070C665B07A55701409059091802D90C2463F162B781D1AB5F01C2AC86674E5689362B541E80A7256435EEC857D1A2A28FC6484D545F05703EA723090E99EA20F1844AB021735087DACD03A710BB3824AC5E81E238683887CBBECD1EA84D2BA2D4CF9415842CD47C7FCE59F2115FE67CFCC27C013CBB66D47C69C5595C5639ADB4F40C661C1B6E4821ACB93B558C9AB7C39E750A72AD3B7A54651DB933B986745A50CD97570F17068D98A17D286C898E03C48A8FD5A1D06A7A6254BD00916A7976BFB25E7F36CF92D583E5F808A200D10E2111B72DAF00880B7C3A26C9AA795AD69CF56BF0B6E7A1B6E57531734D2349D51EF59652BBE3E3E957AA4EB4C720147F951E945C51CD41743D1D9787690FB1738184830158389CCA2DF35143C87AA52E281957FE8EFCFDAC5AFEBD415D2F289CF5A2803F8565DE971095EAA26BCDC2468DAA4E0D55D0DEECE8C162D91F70F9EC4EC1323AC50EAACB828D96A3AAA659BE09D7E5F133B3C0B93FD

pk=N (2048-bit):
03BEA95A1B88A128BC2EC72E7135793C58CD9C66D7ED637BF6E7BB49D1B888997FDF19F347DF1C973A1B9B7E86162CD565514D2D9A99B92C488BB690A4031BFC9727B17857C0A05D32DAB1DAA7F570B3E7BE863F5AAD6583D79A8446ADB7190E7CD74DBDDF5B38EDC2C2B4307068AD717B024F3F317E442C7812EE49FB02711DFC9FB282F1183A6A44EAED9781C4799B6760880A5ED5AC91315A87E410B0049B5309C92ECE60C493371996EFF948B08B92A29900ABB7086DC31B5FA5893A04E466C7C142A2F8CF558B9FC4098404BC922E1230AFB572189E7D7585FFDEF9E0973B9A60417609BC71853CD080E86C9F36F2325EAE4B1FA22E88CC0CF3FFD220D1

sk=lamda (2048-bit):
03BEA95A1B88A128BC2EC72E7135793C58CD9C66D7ED637BF6E7BB49D1B888997FDF19F347DF1C973A1B9B7E86162CD565514D2D9A99B92C488BB690A4031BFC9727B17857C0A05D32DAB1DAA7F570B3E7BE863F5AAD6583D79A8446ADB7190E7CD74DBDDF5B38EDC2C2B4307068AD717B024F3F317E442C7812EE49FB02711DB43E61FA7C3082B0F18ECCA4CD5BF257A1057E6DD39280CAA6F84167A7A6C9CF41EB8066AA9A1C7BED617BF2480147BDA4883E9D978500BCEDA1CFC6B7BD700CF424732F230B605222C12D42BC1A65CC6702AEDD3835109DF4362913E35AB17D0FB72071A9103BAF39EA3655A98AC1FFE54EB1E5345ECE68DF13CBA8B4CDAE64

===== Key 2 =====
byteLength: 256

p=N^2 (4096-bit):
9D2BC8C93E09E38980041A8BD51FF4DC6D8AAB0F59953637EC48CF16591815922B98871B708FCEA6278CF63DFB535719F123BD1E10E9A9E27CC02BB791C42A430D917A4C84D4B1C85674372D3F6FB1BA91B2D58A8AF210CDF9B1C64118D564180D240E69BDB717CE797A3DA149CA890FCE95EBCA5DFFBCACC1CA6A13A153467110B475A157E72CCF9A290BB6CB8128008DB21222A1F92D72E34EC2E9E3A5CAAF560F6E40E14528A9F9205F8B73DF6AC39E90F6C4F58C9ACD65405FCE28F53D6E40FC6EA4EC17F652567A335940B9A1DC0C3EF405ACBC5AE3614540F5A3987080505413818A6476B9616AF51A7483BDD5EC2D42F9356465FC6DC26A6A43E2DEEC5C82722DD4E90F6BC134E0C56C0C4BD9B91FC8534E1C901279ECC59BDA7ED685D5024A3F0ACAAAB08539578583CD98DDE294F1484CF26C071E5BD35B05CAF3B2C39EB51DA10B5CBE93C02B86A6B82DB7755E5511E2BF1E2ECC272F1901E3641B05A80E560CEA98CD6EDEC4729105043F93C92609675FE39A2459D95FB6F293CA769CEA76B4596D373236B868681DB7CE60240235A10EE222EE86BB8089CD72DB9A7E736DC19D49CDF15A02A6FD49D5E801DB9577C33C3E2DA378352297EBF093DD04133294AA1343EE902CB0FD6E955F1945728450C7D2E45F01167011D64D951C07A6C96569310804D89AC09859B480E199F00D791D5F5D9035DFFA42C55099

Q (4112-bit):
02CD17C4162B0D1E235812B91DFC61CD2DB3C8AC7608B8C75F260C30D5F67DE26AE6E7E86D31901ED61473237ACAAC3D665C330ED92D2A1719592CC775890F00D1EDE7BDFD1E0A6B220A723BBE716D9AE338BFEE4819F06CABC33B1889014D98ADBBF481C271935C9E0A3DB92FE0AC11581E8C03CB4CDECCD4342B83F9900BF163DC3758B0210EBC732F5B4572007D4682867C72BE0300DF5C2D17594B1EA46CBFF8A6670803CB898780A3B3EC40AB571C837565E2A05182491DF5B51C9ADEE847087FB8D0752D53D7AA8D8A47374EF27BF7DF3959E41B5EAD6BCBF860BA6781496E7F98FF076A5DADCC77FE48B3991220058E8191039A114FB4C70584D5BB1916661328F11B67565BA1814184BCF81A115CA101FC146251544C48459714E2B2C29BDA72BFA13CAAC55FD59F51295A097459C78CD9DF120CE07A82F44F4A6DF7DF9C841A572EC3D725821CC69658A85095077E64219A87F9B58372C6E2189D78BB49CEC1689AEE592949D8604AB5A6E3621245BD8AE7A57E6F45D9EFC4B2B2C24BBD2BEDBD96D8024BD519A95C5B07969D96A44A14AED3E7BF6046B77A74B95C09F0E0EEA4C35DA0BB9D2AAC19E3A0DFF28879D9F26AC2DBB039D4726DD52479A2A0629796C647F7E5F071CBE784488981E34CDA7BB08FB231F174F65F5161C1F84FE2E8F6DEAFEFB4961C420EB719478C054E573D7896031AE1F5CDE5D0A43FBA11

G:
01B0069EE8037D7E73D3ECCAC79C800822259839D3CB9437884EA3D0876F14B2A8A993C7D15F3C8CEF837B47ED31E683A0683891A4504404FFC49C88DA932D41BD81C62B053D88DF9BB067B0AE3E877D3057E95DB9C3AB74FE551B4374A103237F1B2AC49C7A83DB0341F82EF34C5C818E823355161A8182AA993287AE6B656722CF2444A8FC7C1CAC21301511384CD5AB86491BB394AA43387C9F4A49DDF36B51F19D17E1DA40E04A09B93D992120693AE154B563FF3E7EBE01F82EE4440F0C778C5B01E78085391233698CCA2BDA36FAF7C0AEA3E251B2539AFA99EDA3D0A0A1327C607F7ED8647C2236DEECFFE7C747FA7C8FD3205D75286673024456BBAD2E208598D81C126626A8746E68C0AC3C1A1AF6E3C33F10D4B9307A94AC16F3BD48EB9E245FC5F862A1BC545FDE3930526C5E057EA0560A33044F37E1046EB9AD284F4F22C309F8B9E7CEC0ADA31D08A9CB19AE528B18E35763C46294438B9B380F2D36E76A7A83E323AF7E0E74C8A6DD37712CD11F89C5DB3C23D3F12A046A5600ECFFAE5FE2BF1026CA529A95297FE2888F1117382B7AE6198F9063041CF535128E980A4B6089EA4C28CB12B6F67D816F071D13CF24028F2059398B91522E4FCDBC0191FFAAFCF51A4FC26F9A07203A380373156F14C427B7E8253CDB8E14D1AB00712CDC982FE44CDB4E4B5B1A9480FA4A98A7DDD4BCC5CBE0DE916177EE1128FF

pk=N (2048-bit):
C896AE244AE96FFFD9D598ABB959E9F45A245C674970E988B35CD58C21285B1567B2DE75E2631EB4609BA2ED1BD44F4993DF3DE462B927EE6F95AB5437DA3EA79E22CB18679E7DD01A8A57A38997260FEFBA9E4FEF7278C010785A074BA2DBF0D170C60F09730BD7F9A0D629897900822665724E9B7F20EFF06DD7125727DF61C888C964B3430E8D3F8F8D82383489600105AAD4AEBFFC906BDD760C02FAC4005DC6016E2727BC389CBC371A743FC15AE2CED07D97C543843F51D3B506A1DFB470345F8E461248521DF810E1229BB7645EB413BB2AB368E7F038B185A76D3AB85488B3A3D4F8C74E5B6F3C09012C54A8F2361DC09D7FE64CFD4E076D9C151345

sk=lamda (2048-bit):
C896AE244AE96FFFD9D598ABB959E9F45A245C674970E988B35CD58C21285B1567B2DE75E2631EB4609BA2ED1BD44F4993DF3DE462B927EE6F95AB5437DA3EA79E22CB18679E7DD01A8A57A38997260FEFBA9E4FEF7278C010785A074BA2DBF0D170C60F09730BD7F9A0D629897900822665724E9B7F20EFF06DD7125727DF6000F645E567D385664E3E0A3D6BFDF1194D6DF2132BD9581A57E0701383795FCAF3849DB1F58D85E75D370C5DCCDACFEADE975660F045BD3260D443D4F0742033EA26175D9CB44565355010FBB7F618296DBFD59F3FA9AA7595F719BA1FCBA36F968B2E9BE1EC62D9001F803C03BD09F0294C32BB7B693D46C17A643F7025C680

===== Key 3 =====
byteLength: 2

p=N^2 (24-bit):
A0DFA1

Q (32-bit):
078A7B8D

G:
0382C328

pk=N (16-bit):
0CAF

sk=lamda (16-bit):
0BE0
*/
  int byteLength = 2;
  auto crypto = PaillierEncryption::generate(byteLength);

  auto Q = crypto->getGroupQ();
  auto p = crypto->getGroupP();
  auto g = crypto->getGroupG();
  auto pk = crypto->getPublicKey();
  auto sk = crypto->getPrivateKey();

  printf("byteLength: %d\n\n", byteLength);
  printf("p=N^2 (%lu-bit):\n%s\n\n", p->toBinary().size()*8, p->toHex().c_str());
  printf("Q (%lu-bit):\n%s\n\n", Q->toBinary().size()*8, Q->toHex().c_str());
  printf("G:\n%s\n\n", g->toHex().c_str());
  printf("pk=N (%lu-bit):\n%s\n\n", pk->toBinary().size()*8, pk->toHex().c_str());
  printf("sk=lamda (%lu-bit):\n%s\n\n", sk->toBinary().size()*8, sk->toHex().c_str());
}

TEST(Paillier, Encrypt_decrypt_with_predefined_group)
{
  auto pk = make_shared<IntegerImpl>("03BEA95A1B88A128BC2EC72E7135793C58CD9C66D7ED637BF6E7BB49D1B888997FDF19F347DF1C973A1B9B7E86162CD565514D2D9A99B92C488BB690A4031BFC9727B17857C0A05D32DAB1DAA7F570B3E7BE863F5AAD6583D79A8446ADB7190E7CD74DBDDF5B38EDC2C2B4307068AD717B024F3F317E442C7812EE49FB02711DFC9FB282F1183A6A44EAED9781C4799B6760880A5ED5AC91315A87E410B0049B5309C92ECE60C493371996EFF948B08B92A29900ABB7086DC31B5FA5893A04E466C7C142A2F8CF558B9FC4098404BC922E1230AFB572189E7D7585FFDEF9E0973B9A60417609BC71853CD080E86C9F36F2325EAE4B1FA22E88CC0CF3FFD220D1", 16);
  auto sk = make_shared<IntegerImpl>("03BEA95A1B88A128BC2EC72E7135793C58CD9C66D7ED637BF6E7BB49D1B888997FDF19F347DF1C973A1B9B7E86162CD565514D2D9A99B92C488BB690A4031BFC9727B17857C0A05D32DAB1DAA7F570B3E7BE863F5AAD6583D79A8446ADB7190E7CD74DBDDF5B38EDC2C2B4307068AD717B024F3F317E442C7812EE49FB02711DB43E61FA7C3082B0F18ECCA4CD5BF257A1057E6DD39280CAA6F84167A7A6C9CF41EB8066AA9A1C7BED617BF2480147BDA4883E9D978500BCEDA1CFC6B7BD700CF424732F230B605222C12D42BC1A65CC6702AEDD3835109DF4362913E35AB17D0FB72071A9103BAF39EA3655A98AC1FFE54EB1E5345ECE68DF13CBA8B4CDAE64", 16);

  string msg = "testing";
  auto m = make_shared<IntegerImpl>(Utils::stringToBinary(msg));

  auto encryptor = make_shared<PaillierEncryption>(pk);
  auto decryptor = make_shared<PaillierEncryption>(pk, sk);

  auto c = encryptor->encrypt(m);
  auto r = decryptor->decrypt(c);

  auto ret = Utils::binaryToString(r->toBinary());

  EXPECT_EQ(m->toHex(), r->toHex());
  EXPECT_EQ(ret, msg);
}


} // namespace
