// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from utils.djinni

#import "CPCryptoUtils+Private.h"
#import "CPCryptoUtils.h"
#import "CPECCurve+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface CPCryptoUtils ()

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::CryptoUtils>&)cppRef;

@end

@implementation CPCryptoUtils {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::cryptoplus::CryptoUtils>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::CryptoUtils>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nonnull NSData *)ecGenerateSignature:(nullable CPECCurve *)curve
                             privateKey:(nonnull NSData *)privateKey
                                message:(nonnull NSData *)message {
    try {
        auto objcpp_result_ = ::cryptoplus::CryptoUtils::ecGenerateSignature(::djinni_generated::ECCurve::toCpp(curve),
                                                                             ::djinni::Binary::toCpp(privateKey),
                                                                             ::djinni::Binary::toCpp(message));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)ecVerifySignature:(nullable CPECCurve *)curve
                publicKey:(nonnull NSData *)publicKey
                  message:(nonnull NSData *)message
                signature:(nonnull NSData *)signature {
    try {
        auto objcpp_result_ = ::cryptoplus::CryptoUtils::ecVerifySignature(::djinni_generated::ECCurve::toCpp(curve),
                                                                           ::djinni::Binary::toCpp(publicKey),
                                                                           ::djinni::Binary::toCpp(message),
                                                                           ::djinni::Binary::toCpp(signature));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSData *)ecEncrypt:(nullable CPECCurve *)curve
                    publicKey:(nonnull NSData *)publicKey
                    plaintext:(nonnull NSData *)plaintext {
    try {
        auto objcpp_result_ = ::cryptoplus::CryptoUtils::ecEncrypt(::djinni_generated::ECCurve::toCpp(curve),
                                                                   ::djinni::Binary::toCpp(publicKey),
                                                                   ::djinni::Binary::toCpp(plaintext));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSData *)ecDecrypt:(nullable CPECCurve *)curve
                   privateKey:(nonnull NSData *)privateKey
                   cyphertext:(nonnull NSData *)cyphertext {
    try {
        auto objcpp_result_ = ::cryptoplus::CryptoUtils::ecDecrypt(::djinni_generated::ECCurve::toCpp(curve),
                                                                   ::djinni::Binary::toCpp(privateKey),
                                                                   ::djinni::Binary::toCpp(cyphertext));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSData *)aesEncrypt:(nonnull NSData *)key
                            iv:(nonnull NSData *)iv
                     plainText:(nonnull NSData *)plainText {
    try {
        auto objcpp_result_ = ::cryptoplus::CryptoUtils::aesEncrypt(::djinni::Binary::toCpp(key),
                                                                    ::djinni::Binary::toCpp(iv),
                                                                    ::djinni::Binary::toCpp(plainText));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSData *)aesDecrypt:(nonnull NSData *)key
                            iv:(nonnull NSData *)iv
                 encryptedText:(nonnull NSData *)encryptedText {
    try {
        auto objcpp_result_ = ::cryptoplus::CryptoUtils::aesDecrypt(::djinni::Binary::toCpp(key),
                                                                    ::djinni::Binary::toCpp(iv),
                                                                    ::djinni::Binary::toCpp(encryptedText));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSData *)merkleTreeRootHash:(nonnull NSArray<NSData *> *)values {
    try {
        auto objcpp_result_ = ::cryptoplus::CryptoUtils::merkleTreeRootHash(::djinni::List<::djinni::Binary>::toCpp(values));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto CryptoUtils::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto CryptoUtils::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<CPCryptoUtils>(cpp);
}

}  // namespace djinni_generated

@end
