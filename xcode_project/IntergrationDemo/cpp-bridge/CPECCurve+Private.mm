// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ec.djinni

#import "CPECCurve+Private.h"
#import "CPECCurve.h"
#import "CPECPoint+Private.h"
#import "CPInteger+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface CPECCurve ()

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::ECCurve>&)cppRef;

@end

@implementation CPECCurve {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::cryptoplus::ECCurve>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::ECCurve>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable CPECCurve *)create:(nullable CPInteger *)p
                             a:(nullable CPInteger *)a
                             b:(nullable CPInteger *)b
                             n:(nullable CPInteger *)n
                             g:(nullable CPECPoint *)g {
    try {
        auto objcpp_result_ = ::cryptoplus::ECCurve::create(::djinni_generated::Integer::toCpp(p),
                                                            ::djinni_generated::Integer::toCpp(a),
                                                            ::djinni_generated::Integer::toCpp(b),
                                                            ::djinni_generated::Integer::toCpp(n),
                                                            ::djinni_generated::ECPoint::toCpp(g));
        return ::djinni_generated::ECCurve::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPECCurve *)SECP256K1 {
    try {
        auto objcpp_result_ = ::cryptoplus::ECCurve::SECP256K1();
        return ::djinni_generated::ECCurve::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPECPoint *)getPublicElement:(nonnull NSData *)publicKey {
    try {
        auto objcpp_result_ = ::cryptoplus::ECCurve::getPublicElement(::djinni::Binary::toCpp(publicKey));
        return ::djinni_generated::ECPoint::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPInteger *)getPrivateElement:(nonnull NSData *)privateKey {
    try {
        auto objcpp_result_ = ::cryptoplus::ECCurve::getPrivateElement(::djinni::Binary::toCpp(privateKey));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)getP {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getP();
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)getA {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getA();
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)getB {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getB();
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)getN {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getN();
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPECPoint *)getG {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getG();
        return ::djinni_generated::ECPoint::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPECPoint *)computeGenerator:(nonnull NSData *)seed {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->computeGenerator(::djinni::Binary::toCpp(seed));
        return ::djinni_generated::ECPoint::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPECPoint *)inv:(nullable CPECPoint *)a {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->inv(::djinni_generated::ECPoint::toCpp(a));
        return ::djinni_generated::ECPoint::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPECPoint *)add:(nullable CPECPoint *)a
                          b:(nullable CPECPoint *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->add(::djinni_generated::ECPoint::toCpp(a),
                                                       ::djinni_generated::ECPoint::toCpp(b));
        return ::djinni_generated::ECPoint::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPECPoint *)sub:(nullable CPECPoint *)a
                          b:(nullable CPECPoint *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->sub(::djinni_generated::ECPoint::toCpp(a),
                                                       ::djinni_generated::ECPoint::toCpp(b));
        return ::djinni_generated::ECPoint::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPECPoint *)mul:(nullable CPInteger *)a
                          b:(nullable CPECPoint *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->mul(::djinni_generated::Integer::toCpp(a),
                                                       ::djinni_generated::ECPoint::toCpp(b));
        return ::djinni_generated::ECPoint::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPECPoint *)multiply:(nullable CPInteger *)a
                               b:(nullable CPECPoint *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->multiply(::djinni_generated::Integer::toCpp(a),
                                                            ::djinni_generated::ECPoint::toCpp(b));
        return ::djinni_generated::ECPoint::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)verify:(nullable CPECPoint *)p {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->verify(::djinni_generated::ECPoint::toCpp(p));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)encodePoint:(nullable CPECPoint *)p
                     compressed:(BOOL)compressed {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->encodePoint(::djinni_generated::ECPoint::toCpp(p),
                                                               ::djinni::Bool::toCpp(compressed));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPECPoint *)decodePoint:(nonnull NSData *)encoded {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->decodePoint(::djinni::Binary::toCpp(encoded));
        return ::djinni_generated::ECPoint::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ECCurve::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ECCurve::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<CPECCurve>(cpp);
}

}  // namespace djinni_generated

@end
