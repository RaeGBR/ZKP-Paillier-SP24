// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

#import "CPInteger+Private.h"
#import "CPInteger.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface CPInteger ()

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::Integer>&)cppRef;

@end

@implementation CPInteger {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::cryptoplus::Integer>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::Integer>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable CPInteger *)create:(nonnull NSString *)num
                         radix:(int32_t)radix {
    try {
        auto objcpp_result_ = ::cryptoplus::Integer::create(::djinni::String::toCpp(num),
                                                            ::djinni::I32::toCpp(radix));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPInteger *)createWithString:(nonnull NSString *)num {
    try {
        auto objcpp_result_ = ::cryptoplus::Integer::createWithString(::djinni::String::toCpp(num));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPInteger *)createWithBinary:(nonnull NSData *)num {
    try {
        auto objcpp_result_ = ::cryptoplus::Integer::createWithBinary(::djinni::Binary::toCpp(num));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPInteger *)createWithBinaryString:(nonnull NSString *)num {
    try {
        auto objcpp_result_ = ::cryptoplus::Integer::createWithBinaryString(::djinni::String::toCpp(num));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPInteger *)createWithNumber:(int32_t)num {
    try {
        auto objcpp_result_ = ::cryptoplus::Integer::createWithNumber(::djinni::I32::toCpp(num));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPInteger *)ZERO {
    try {
        auto objcpp_result_ = ::cryptoplus::Integer::ZERO();
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPInteger *)ONE {
    try {
        auto objcpp_result_ = ::cryptoplus::Integer::ONE();
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPInteger *)TWO {
    try {
        auto objcpp_result_ = ::cryptoplus::Integer::TWO();
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPInteger *)pow2:(int32_t)n {
    try {
        auto objcpp_result_ = ::cryptoplus::Integer::pow2(::djinni::I32::toCpp(n));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)eq:(nullable CPInteger *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->eq(::djinni_generated::Integer::toCpp(b));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)gt:(nullable CPInteger *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->gt(::djinni_generated::Integer::toCpp(b));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)gte:(nullable CPInteger *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->gte(::djinni_generated::Integer::toCpp(b));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)lt:(nullable CPInteger *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->lt(::djinni_generated::Integer::toCpp(b));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)lte:(nullable CPInteger *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->lte(::djinni_generated::Integer::toCpp(b));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)add:(nullable CPInteger *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->add(::djinni_generated::Integer::toCpp(b));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)sub:(nullable CPInteger *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->sub(::djinni_generated::Integer::toCpp(b));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)mul:(nullable CPInteger *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->mul(::djinni_generated::Integer::toCpp(b));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)mod:(nullable CPInteger *)n {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->mod(::djinni_generated::Integer::toCpp(n));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)inv:(nullable CPInteger *)n {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->inv(::djinni_generated::Integer::toCpp(n));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)compare:(nullable CPInteger *)n {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->compare(::djinni_generated::Integer::toCpp(n));
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)modMul:(nullable CPInteger *)b
                             n:(nullable CPInteger *)n {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->modMul(::djinni_generated::Integer::toCpp(b),
                                                          ::djinni_generated::Integer::toCpp(n));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)modPow:(nullable CPInteger *)b
                             n:(nullable CPInteger *)n {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->modPow(::djinni_generated::Integer::toCpp(b),
                                                          ::djinni_generated::Integer::toCpp(n));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)modSqrt:(nullable CPInteger *)n {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->modSqrt(::djinni_generated::Integer::toCpp(n));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)toString {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toString();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)toHex {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toHex();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)toBinary {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toBinary();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)toBinaryString {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toBinaryString();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)toNumber {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->toNumber();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Integer::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Integer::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<CPInteger>(cpp);
}

}  // namespace djinni_generated

@end
