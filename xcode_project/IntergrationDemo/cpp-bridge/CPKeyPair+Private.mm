// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ec.djinni

#import "CPKeyPair+Private.h"
#import "CPKeyPair.h"
#import "CPECCurve+Private.h"
#import "CPECPoint+Private.h"
#import "CPInteger+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface CPKeyPair ()

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::KeyPair>&)cppRef;

@end

@implementation CPKeyPair {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::cryptoplus::KeyPair>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::KeyPair>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable CPKeyPair *)create:(nullable CPECCurve *)curve {
    try {
        auto objcpp_result_ = ::cryptoplus::KeyPair::create(::djinni_generated::ECCurve::toCpp(curve));
        return ::djinni_generated::KeyPair::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPKeyPair *)createWithSeed:(nullable CPECCurve *)curve
                                  seed:(nonnull NSData *)seed {
    try {
        auto objcpp_result_ = ::cryptoplus::KeyPair::createWithSeed(::djinni_generated::ECCurve::toCpp(curve),
                                                                    ::djinni::Binary::toCpp(seed));
        return ::djinni_generated::KeyPair::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPKeyPair *)createWithPrivateKey:(nullable CPECCurve *)curve
                                  privateKey:(nonnull NSData *)privateKey {
    try {
        auto objcpp_result_ = ::cryptoplus::KeyPair::createWithPrivateKey(::djinni_generated::ECCurve::toCpp(curve),
                                                                          ::djinni::Binary::toCpp(privateKey));
        return ::djinni_generated::KeyPair::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPECCurve *)getCurve {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCurve();
        return ::djinni_generated::ECCurve::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)getPrivateKey {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPrivateKey();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)getPublicKey {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPublicKey();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPECPoint *)getPublicElement {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPublicElement();
        return ::djinni_generated::ECPoint::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable CPInteger *)getPrivateElement {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPrivateElement();
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)eq:(nullable CPKeyPair *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->eq(::djinni_generated::KeyPair::toCpp(b));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto KeyPair::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto KeyPair::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<CPKeyPair>(cpp);
}

}  // namespace djinni_generated

@end
