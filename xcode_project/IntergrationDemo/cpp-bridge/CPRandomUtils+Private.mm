// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from utils.djinni

#import "CPRandomUtils+Private.h"
#import "CPRandomUtils.h"
#import "CPInteger+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface CPRandomUtils ()

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::RandomUtils>&)cppRef;

@end

@implementation CPRandomUtils {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::cryptoplus::RandomUtils>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::RandomUtils>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nonnull NSData *)random:(int32_t)byteLength {
    try {
        auto objcpp_result_ = ::cryptoplus::RandomUtils::random(::djinni::I32::toCpp(byteLength));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSData *)randomWithSeed:(int32_t)byteLength
                              seed:(nonnull NSData *)seed {
    try {
        auto objcpp_result_ = ::cryptoplus::RandomUtils::randomWithSeed(::djinni::I32::toCpp(byteLength),
                                                                        ::djinni::Binary::toCpp(seed));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSString *)randomHex:(int32_t)byteLength {
    try {
        auto objcpp_result_ = ::cryptoplus::RandomUtils::randomHex(::djinni::I32::toCpp(byteLength));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSString *)randomHexWithSeed:(int32_t)byteLength
                                   seed:(nonnull NSData *)seed {
    try {
        auto objcpp_result_ = ::cryptoplus::RandomUtils::randomHexWithSeed(::djinni::I32::toCpp(byteLength),
                                                                           ::djinni::Binary::toCpp(seed));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPInteger *)randomInt:(int32_t)byteLength {
    try {
        auto objcpp_result_ = ::cryptoplus::RandomUtils::randomInt(::djinni::I32::toCpp(byteLength));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable CPInteger *)randomIntWithSeed:(int32_t)byteLength
                                     seed:(nonnull NSData *)seed {
    try {
        auto objcpp_result_ = ::cryptoplus::RandomUtils::randomIntWithSeed(::djinni::I32::toCpp(byteLength),
                                                                           ::djinni::Binary::toCpp(seed));
        return ::djinni_generated::Integer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto RandomUtils::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto RandomUtils::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<CPRandomUtils>(cpp);
}

}  // namespace djinni_generated

@end
