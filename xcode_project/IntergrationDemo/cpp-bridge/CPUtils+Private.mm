// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from utils.djinni

#import "CPUtils+Private.h"
#import "CPUtils.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface CPUtils ()

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::Utils>&)cppRef;

@end

@implementation CPUtils {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::cryptoplus::Utils>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::cryptoplus::Utils>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nonnull NSString *)binaryToString:(nonnull NSData *)bytes {
    try {
        auto objcpp_result_ = ::cryptoplus::Utils::binaryToString(::djinni::Binary::toCpp(bytes));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSString *)binaryToHex:(nonnull NSData *)bytes {
    try {
        auto objcpp_result_ = ::cryptoplus::Utils::binaryToHex(::djinni::Binary::toCpp(bytes));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSData *)binaryConcat:(nonnull NSData *)a
                               b:(nonnull NSData *)b {
    try {
        auto objcpp_result_ = ::cryptoplus::Utils::binaryConcat(::djinni::Binary::toCpp(a),
                                                                ::djinni::Binary::toCpp(b));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSData *)binaryPadZero:(nonnull NSData *)bytes
                           length:(int32_t)length {
    try {
        auto objcpp_result_ = ::cryptoplus::Utils::binaryPadZero(::djinni::Binary::toCpp(bytes),
                                                                 ::djinni::I32::toCpp(length));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSData *)stringToBinary:(nonnull NSString *)plainText {
    try {
        auto objcpp_result_ = ::cryptoplus::Utils::stringToBinary(::djinni::String::toCpp(plainText));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSString *)stringToHex:(nonnull NSString *)plainText {
    try {
        auto objcpp_result_ = ::cryptoplus::Utils::stringToHex(::djinni::String::toCpp(plainText));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSData *)hexToBinary:(nonnull NSString *)hexString {
    try {
        auto objcpp_result_ = ::cryptoplus::Utils::hexToBinary(::djinni::String::toCpp(hexString));
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSString *)hexToString:(nonnull NSString *)plainText {
    try {
        auto objcpp_result_ = ::cryptoplus::Utils::hexToString(::djinni::String::toCpp(plainText));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Utils::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Utils::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<CPUtils>(cpp);
}

}  // namespace djinni_generated

@end
